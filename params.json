{"name":"mkproj","tagline":"a scaffolding tool for tiny JavaScript projects","body":"MKPROJ\r\n--------------------\r\n\r\n![welcome 2 hell](construction.png)\r\n\r\nsimple scaffolding tool for making node modules and/or Browserify'd web apps and/or twitter bots and/or CLI tools, or any combination thereof, and also for adding any of these aformentioned things to any existing project that has a `package.json` file. \r\n\r\n[![NPM](https://nodei.co/npm/mkproj.png)](https://nodei.co/npm/mkproj/)\r\n[![Build Status](https://secure.travis-ci.org/coleww/mkproj.png)](http://travis-ci.org/coleww/mkproj)\r\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\r\n\r\n### INSTALL IT\r\n\r\n`npm install -g mkproj`\r\n\r\n### USE IT\r\n\r\n```\r\n$ mkproj wat\r\n$$\\      $$\\       $$\\   $$\\       $$$$$$$\\        $$$$$$$\\         $$$$$$\\           $$$$$\\\r\n$$$\\    $$$ |      $$ | $$  |      $$  __$$\\       $$  __$$\\       $$  __$$\\          \\__$$ |\r\n$$$$\\  $$$$ |      $$ |$$  /       $$ |  $$ |      $$ |  $$ |      $$ /  $$ |            $$ |\r\n$$\\$$\\$$ $$ |      $$$$$  /        $$$$$$$  |      $$$$$$$  |      $$ |  $$ |            $$ |\r\n$$ \\$$$  $$ |      $$  $$<         $$  ____/       $$  __$$<       $$ |  $$ |      $$\\   $$ |\r\n$$ |\\$  /$$ |      $$ |\\$$\\        $$ |            $$ |  $$ |      $$ |  $$ |      $$ |  $$ |\r\n$$ | \\_/ $$ |      $$ | \\$$\\       $$ |            $$ |  $$ |       $$$$$$  |      \\$$$$$$  |\r\n\\__|     \\__|      \\__|  \\__|      \\__|            \\__|  \\__|       \\______/        \\______/\r\n\r\n\r\n\r\nCREATED: wat/.gitignore\r\nCREATED: wat/.travis.yml\r\nCREATED: wat/.npmignore\r\nCREATED: wat/README.md\r\nCREATED: wat/`package.json`\r\nCREATED: wat/index.js\r\nCREATED: wat/test.js\r\nwat project has been mk'd with  boilerplate!\r\n                               |        |\r\n                               |\\      /|\r\n                               | \\____/ |\r\n                               |  /\\/\\  |\r\n                              .'___  ___`.\r\n                             /  \\|/  \\|/  \\\r\n            _.--------------( ____ __ _____)\r\n         .-' \\  -. | | | | | \\ ----\\/---- /\r\n       .'\\  | | / \\` | | | |  `.  -'`-  .'\r\n      /`  ` ` '/ / \\ | | | | \\  `------'\\\r\n     /-  `-------.' `-----.       -----. `---.\r\n    (  / | | | |  )/ | | | )/ | | | | | ) | | )\r\n     `._________.'_____,,,/\\_______,,,,/_,,,,/\r\nW A Y    C H I L L!               =^.^=            R A D I C A L!\r\n```\r\n\r\nAfter generating the project folder/files, it `cd`'s into the new folder and runs `npm init` and `npm install` and `git init` and `git commit -m \"initial\"` FOR YOU! NO WORRIES! WE GOT YOU ON THIS ONE!\r\n\r\n\r\n### ADD TO AN EXISTING PROJECT\r\n\r\nJust `cd` into any project folder that contains a `package.json`, whether created via `mkproj` or not, and run:\r\n\r\n``` \r\n  mkproj -t\r\n```\r\n(or `-b` or `-c` or any combination thereof) `mkproj` will add some twitter bot config files and boilerplate and install the `twit` module and even add a `tweet` entry to the `scripts` in yr `package.json`. It will even guess a good variable name to use for your module ;).\r\n\r\nIf at any point the module hits a bump in the road due to, say, a file already existing or a duplicate `scripts` entry it will output a helpful error, thus allowing you, the programmer, to rectify this error. \r\n\r\n### THE COMMAND LINE API\r\n\r\n```\r\n::::    ::::       :::    :::      :::::::::       :::::::::        ::::::::       :::::::::::\r\n+:+:+: :+:+:+      :+:   :+:       :+:    :+:      :+:    :+:      :+:    :+:          :+:\r\n+:+ +:+:+ +:+      +:+  +:+        +:+    +:+      +:+    +:+      +:+    +:+          +:+\r\n+#+  +:+  +#+      +#++:++         +#++:++#+       +#++:++#:       +#+    +:+          +#+\r\n+#+       +#+      +#+  +#+        +#+             +#+    +#+      +#+    +#+          +#+\r\n#+#       #+#      #+#   #+#       #+#             #+#    #+#      #+#    #+#      #+# #+#\r\n###       ###      ###    ###      ###             ###    ###       ########        #####\r\ngenerates tiny node projects\r\n\r\nOptions:\r\n  -b, --browserify, --browser, --bacon  installs browserify/watchify and adds /\r\n                                        www folder\r\n  -c, --cli, --cmd, -l, --lettuce       installs yargs and adds cmd.js file\r\n  -t, --twitter, --tweet, --tomato      installs twit and adds tweet.js file\r\n  -n, --noPleaseDoNotInstallThanks      skip the whole \"npm init/npm install/git\r\n                                        init/initial commit\" business\r\n  -h, --help                            Show help                      [boolean]\r\n\r\nExamples:\r\n  mkproj yr-awesome-vanilla-node-project\r\n  mkproj yr-cool-twitter-bot -tweet\r\n  mkproj make-me-a-sandwich-please -blt\r\n  mkproj -b # add /www and browserify to an existing project\r\n\r\n```\r\n\r\n### BROWSERIFY\r\n\r\nBrowserify is awesome. It lets you use node modules in the browser, and push all yr code to npm. Sweet. Even if you are making a \"node module\" to publish, you might want to use browserify to create a tiny demo page for your tiny module. Run `npm run watch` to start watchify and also plz fire up a simple HTTPserver ([i like this node module](https://www.npmjs.com/package/serve) though any sort of gem or egg will do) and then you can immediately get started writing NODE IN THE BROWSER ZOMG AWESOME! This also adds gh-pages deploy, which is a pretty sweet way to push yr projects to the cloud for free. Check the config in the `package.json`. [read more about browserify](https://github.com/substack/browserify-handbook)\r\n\r\n### TWITTER\r\n\r\nEvery time I make a twitter bot I have to google \"node [twit](https://github.com/ttezel/twit)\" and copy paste the boilerplate setup with the access tokens and whatnot. NEVER MORE. Add your keys to tweet.js and \"business logic\" to bot.js, and call `npm run tweet` on a cronjob or something. [an example node twitter bot](https://github.com/dariusk/examplebot)\r\n\r\n### CLI\r\n\r\nBy using some [yargs](https://github.com/bcoe/yargs) boilerplate, we are reminded to write good documentation for our CLI tool, so that when it fails or someone passes `-h` or `-help` or `-ohMyWhatIsGoingOnHere`, people will get a helpful message instead of abstract garbage. The code inside `cmd.js` is setup to do stuff like `yrModule -i 1000 wowowowowow ok cool` as well as pipey stuff like `cat index.js | yrModule -i 5000`. [read more about node CLI magics here](http://www.colewillsea.com/blog/npm-cli) This option also adds a `bin` entry to yr `package.json` so that when someone `npm install -g`s it they will have yr module available on their path. If your module only makes sense as a command line tool, add `\"preferGlobal\": true` to yr `package.json` as well.\r\n\r\n### STANDARD\r\n\r\n`mkproj` installs [standard](https://github.com/feross/standard) on all projects by default. It is ok. Do not fret or gnash those teeth! The semi-colons will be automatically inserted by the computer. This is the first thing that runs if you `npm test`. TBQH, I vastly prefer `function(){}` over `function () {}`, which is what `standard` expects, but hey, I roll with it.\r\n\r\n### TAP/TAPE\r\n\r\nA `test.js` file will be created for you which requires `tape` if you are using browserify or `tap` if you are not. The only real difference between tape and tap is that the former is for the browser and the latter is for the Node.js. `npm test` will fire off this test file, after running `standard` of course.\r\n\r\n### MY DEAR FRIEND, TRAVIS\r\n\r\nMy close friend [https://travis-ci.org/](Travis) will totally check out your code and run your tests whenever you push to `git` or whatever, all for free. I even put little twitter bots and silly art projects on CI because it is worth getting that extra once-over from my longtime friend, Travis. If yr developing on a macbook and deploying to various linux-based cloud architectures then CI is indispendable for catching all those little edge case environment bugs.\r\n\r\n### BADGES\r\n\r\nAww yeah you got some badges in that `README.md`. Yeah you do. Look at those! Just replace the 2 instances of `YR_TRAVIS_USER_NAME` with, umm, your travis user name. Oh also if you are publishing or distributing your project _please for the love of glob write an appropriate amount of documentation in yr `README.md`_, thanks. \r\n\r\n### CONFIG\r\n\r\nThere are a few configuration things that mkproj just can't possibly guess, and for that you can create a `~/.mkproj.json` file. Mine looks like this:\r\n\r\n```\r\n{\r\n  \"githubUserName\": \"coleww\",\r\n  \"website\": \"http://www.colewillsea.com\",\r\n  \"travisUserName\": \"coleww\"\r\n}\r\n```\r\n\r\nThis basically handles personal stuff for the `README.md` and `www/index.html` files, but more awesome tricks might be possible with a little JSON.\r\n\r\n### A BLT\r\n\r\nSome node modules are so awesome that they deserve to be not only balled up into a tar and sent to npm, but also browserified into a web app, bundled into a command line tool, and deployed as a twitter bot. These modules are known colloquially as \"whoppers\", \"ham-sandwiches\", or \"BLT's\", and when we generate one we use the argument `mkproj someProject -blt`. I have never personally made nor witnessed a BLT so unfortunately I cannot link you to an example, but I can dream on, glob willing...\r\n\r\n## F R E E D O M\r\n\r\n`npm publish`\r\n\r\n### DEVELOPMENT\r\n\r\n'mkproj' creates a dummy index.js as well as a tap/tape smokescreen test suite as part of its regular due course of use. When testing this module, it generates a dummy app and makes assertions against the result, but it also copies the `tests/{tap,tape}_modules` directory into the generated test directory, and then runs the test suite that is generated by the test suite. [META-TDD, AWWW YEAH.](http://www.colewillsea.com/blog/test-yr-test-suite) ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}